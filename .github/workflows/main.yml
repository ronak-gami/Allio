name: React Native Allio CI/CD

on:
  push:
    branches:
      - main
      - develop
      
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-android:
    name: Android CI/CD
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        uses: bahmutov/npm-install@v1

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Add debug.keystore
      - name: Setup Debug Keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 -d > android/app/debug.keystore

          if [ -f android/app/debug.keystore ]; then
            echo "debug.keystore created: $(du -h android/app/debug.keystore | cut -f1)"
          else
            echo "Failed to create debug.keystore!"
            exit 1
          fi

      - name: Build Debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      - name: Build Release APK
        run: |
          cd android
          ./gradlew assembleRelease
        # env:
        #   RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
        #   RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        #   RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}

      # Extract project name and version (from gradle.properties)
      - name: Extract project name and version
        run: |
          # Extract namespace from build.gradle and strip 'com.' if present
          NAMESPACE=$(grep -oP 'namespace\s+"[^"]+"' android/app/build.gradle | cut -d'"' -f2)
          PROJECT_NAME=$(echo "$NAMESPACE" | sed 's/^com\.//')

          # Get version name from gradle.properties and convert to 1_0_1 format
          VERSION_NAME=$(grep '^VERSION_NAME=' android/gradle.properties | cut -d'=' -f2)
          VERSION_NAME_UNDERSCORE=$(echo "$VERSION_NAME" | tr '.' '_')

          # Export to GitHub environment
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME_UNDERSCORE" >> $GITHUB_ENV

      # Rename APKs using extracted project name and version
      - name: Rename APKs with project name and version
        run: |
          DEBUG_SRC="android/app/build/outputs/apk/debug/app-debug.apk"
          RELEASE_SRC="android/app/build/outputs/apk/release/app-release.apk"

          DEBUG_DEST="android/app/build/outputs/apk/debug/${PROJECT_NAME}_debug_${VERSION_NAME}.apk"
          RELEASE_DEST="android/app/build/outputs/apk/release/${PROJECT_NAME}_release_${VERSION_NAME}.apk"

          mv "$DEBUG_SRC" "$DEBUG_DEST"
          mv "$RELEASE_SRC" "$RELEASE_DEST"

          echo "DEBUG_DEST=$DEBUG_DEST" >> $GITHUB_ENV
          echo "RELEASE_DEST=$RELEASE_DEST" >> $GITHUB_ENV

      # Upload renamed APKs as GitHub Artifacts
      - name: Upload Renamed APKs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: APKs_${{ env.VERSION_NAME }}_${{ env.PROJECT_NAME }}
          path: |
            ${{ env.DEBUG_DEST }}
            ${{ env.RELEASE_DEST }}
